---
import Layout from "../../../layouts/Layout.astro";
import {UserModel} from "../../../util/users"

const user = await Astro.session?.get("user");

if (!user || !user.administrator) {
    return Astro.redirect("/");
}

function generateRandomPassword(length = 16) {
    const charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;:,.<>?";
    let password = "";
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        password += charset[randomIndex];
    }
    return password;
}

let randomPassword;
let newUser;
if (Astro.request.method == "POST") {
    const formData = await Astro.request.formData();
    const username = formData.get("username");
    newUser = username + "";
    randomPassword = generateRandomPassword(16);

    const organizator = formData.get("organizator") === "on";

    if (username && randomPassword) {
        await UserModel.create({
            name: username, password: randomPassword, organizator: organizator, administrator: false
        });
    } else {
        console.error("Username or password not provided");
    }
}

// Get users
const users = await UserModel.getAll();
---
<Layout title="Welcome to OpenVoting">
    <div class="container">
        <div class="show">
            <h1>Account created</h1>
            <p>Welcome to OpenVoting, {user.name}</p>
            <p>Let's start by creating accounts. If you don't want to <a href="/admin">go to the admin panel</a>.</p>
            {newUser && (
                <div class="new-user">
                    <p>Account created <span id="username">{newUser}</span> with password <span id="password">{randomPassword}</span></p>
                    <label>
                        <button id="inviteUser">Download invite</button>
                    </label>
                </div>
            )}
            <form method="POST">
                <label>
                    <input type="text" name="username" placeholder="Username" autocomplete="off" required />
                </label>
                <label>
                    Can organize polls <input type="checkbox" name="organizator" />
                </label>
                <input type="submit" value="Create (Enter)" />
            </form>
            <table>
                <thead>
                <tr>
                    <th>Username</th>
                    <th>Organizator</th>
                    <th>Administrator</th>
                </tr>
                </thead>
                <tbody>
                {users.map((user: any) => (
                        <tr>
                            <td>{user.name}</td>
                            <td>{user.organizator ? "Yes" : "No"}</td>
                            <td>{user.administrator ? "Yes" : "No"}</td>
                        </tr>
                ))}
            </table>
        </div>
    </div>
</Layout>

<style>
    .container {
        width: 100%;
        height: 100vh;
    }

    .show {
        padding: 20px;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    th {
        background-color: #f2f2f2;
        text-align: left;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tr:hover {
        background-color: #ddd;
    }

    th, td {
        text-align: left;
    }

    input[type="text"], input[type="password"] {
        padding: 12px 20px;
        margin: 8px 0;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
    }

    input[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    input[type="submit"]:hover {
        background-color: #45a049;
    }

    label {
        display: inline-block;
        margin-bottom: 10px;
    }

    button {
        background-color: #008CBA;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    button:hover {
        background-color: #007B9E;
    }

    #inviteUser {
        margin-top: 20px;
    }

    #username, #password {
        font-weight: bold;
    }

    #inviteUser {
        margin-top: 20px;
        display: inline-block;
    }

    #inviteUser:hover {
        background-color: #007B9E;
    }

    #inviteUser:active {
        background-color: #005f73;
    }

    #inviteUser:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    .new-user {
        border: 1px solid #ddd;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f9f9f9;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
</style>

<script>
    import {jsPDF} from "jspdf";
    document.getElementById("inviteUser")?.addEventListener("click", function () {
        // Create a pdf file with the username and password and text: You have been invited to OpenVoting. Your credentials are
        // username and password. Please change your password after logging in.
        const newUser = document.getElementById("username")?.textContent;
        const randomPassword = document.getElementById("password")?.textContent;

        const doc = new jsPDF();

        doc.text(
            `You have been invited to OpenVoting.\n\nDear ${newUser},\n\nYour credentials are as follows:\n\nUsername: ${newUser}\nPassword: ${randomPassword}\n\nPlease change your password after logging in.\n\nBest regards,\nThe OpenVoting Team`,
            10,
            10
        );

        doc.save(`${newUser}.pdf`);
    });
</script>