---
import Layout from "../../layouts/Layout.astro";
import { PollModel } from "../../util/polls";
import { GroupModel } from "../../util/groups";
import { PollOptionModel } from "../../util/poll_options";
import { BlindTokenModel } from "../../util/blind_token";
import { AuditLogger } from "../../util/audit_logger";
import FloatingContainer from "../../components/FloatingContainer.astro";
import Note from "../../components/Note.astro";
import Message from "../../components/Message.astro";
import Messenger from "../../util/ui_utils";

const user = await Astro.session?.get("user");
if (!user || (!user.organizator && !user.administrator)) {
    return Astro.redirect("/");
}

// Owned groups
const userGroups = await GroupModel.getByOwnerId(user.id);

const messenger = new Messenger();

let pollLink = "";
let voterLinks: string[] = [];

// Zpracování formuláře
if (Astro.request.method === "POST") {
    try {
        const formData = await Astro.request.formData();

        // Základní údaje ankety
        const pollName = formData.get("poll-name");
        const expiresStr = formData.get("poll-expires");
        const expires = expiresStr ? new Date(expiresStr as string) : null;
        const isAnonymous = formData.get("poll-anonymous") === "on";
        const groupId = formData.get("poll-group") as string;
        const maxOptions = parseInt(formData.get("poll-max-options") as string) || 1;
        const votersCount = isAnonymous ? parseInt(formData.get("voters-count") as string) || 10 : 0;

        const poll = await PollModel.create({
            name: pollName,
            owner_id: user.id,
            expires,
            anonymous: isAnonymous,
            group_id: isAnonymous ? null : (groupId !== "null" ? parseInt(groupId) : null),
            max_options: maxOptions
        });

        const optionsCount = parseInt(formData.get("options-count") as string) || 2;
        for (let i = 1; i <= optionsCount; i++) {
            const optionContent = formData.get(`option-${i}`);
            if (optionContent) {
                await PollOptionModel.create({
                    poll_id: poll.id,
                    content: optionContent,
                    option_order: i - 1
                });
            }
        }

        // Anonymous voting - gen key pairs
        if (isAnonymous) {
            const updatedPoll = await PollModel.generateSigningKeys(poll.id);

            const tokens = await BlindTokenModel.generateTokens(poll.id, votersCount);

            voterLinks = tokens.map(token => {
                return `/poll/anonymous/${token.tokenData}`;
            });

            messenger.success(`Anonymní anketa "${pollName}" byla úspěšně vytvořena. Níže jsou odkazy pro hlasování.`);
        } else {
            messenger.success(`Anketa "${pollName}" byla úspěšně vytvořena.`);
            pollLink = `/poll/vote/${poll.id}`;
        }

        // Logování vytvoření ankety, nemusí být synchronní, kdyby se něco pokazilo, nevadí
        AuditLogger.log(
            "poll_create",
            "poll",
            poll.id,
            {
                name: pollName,
                expires: expires ? expires.toISOString() : null,
                anonymous: isAnonymous,
                group_id: groupId !== "null" ? parseInt(groupId) : null,
                max_options: maxOptions,
                voters_count: votersCount
            }
        );
    } catch (error: any) {
        console.error("Chyba při vytváření ankety:", error);
        messenger.error(`Nastala neočekávaná chyba při vytváření ankety`);
    }
}
---

<Layout title="Vytvořit novou anketu">
    <div class="container">
        <h1>Vytvoření nové ankety</h1>

        {messenger.map(m =>
                <Message message={m} />
        )}

        {pollLink && (
                <FloatingContainer backgroundColor="#f0f8ff">
                    <h3>Odkaz na anketu</h3>
                    <div class="poll-link">
                        <input type="text" id="poll-link" value={new URL(pollLink, Astro.url).href} readonly>
                        <button class="btn" id="copy-link">Kopírovat</button>
                    </div>
                </FloatingContainer>
        )}

        {voterLinks.length > 0 && (
                <FloatingContainer backgroundColor="#f0f8ff">
                    <h3>Odkazy pro anonymní hlasování</h3>
                    <Note>Každý odkaz lze použít jen jednou. Rozešlete tyto odkazy hlasujícím.</Note>
                    <div class="voter-links-actions">
                        <button class="btn" id="copy-all-links">Kopírovat všechny odkazy</button>
                        <button class="btn" id="download-csv">Stáhnout jako CSV</button>
                    </div>
                    <div class="voter-links-list">
                        {voterLinks.map((link, index) => (
                                <div class="voter-link">
                                    <span class="voter-number">Odkaz {index + 1}:</span>
                                    <input type="text" value={new URL(link, Astro.url).href} readonly>
                                    <button class="btn-small copy-voter-link" data-link={new URL(link, Astro.url).href}>
                                        Kopírovat
                                    </button>
                                </div>
                        ))}
                    </div>
                </FloatingContainer>
        )}

        <FloatingContainer>
            <form method="POST">
            <div class="form-group">
                <label for="poll-name">Název ankety:</label>
                <input type="text" id="poll-name" name="poll-name" required>
            </div>

            <div class="form-group">
                <label for="poll-expires">Končí (nechte prázdné pro neomezeně):</label>
                <input type="datetime-local" id="poll-expires" name="poll-expires">
            </div>

            <div class="form-group checkbox-group">
                <label>
                    <input type="checkbox" name="poll-anonymous" id="poll-anonymous">
                    Anonymní hlasování
                </label>
                <Note>Při anonymním hlasování se generují unikátní odkazy pro každého hlasujícího</Note>
            </div>

            <div class="form-group" id="voters-count-group" style="display: none;">
                <label for="voters-count">Počet hlasujících:</label>
                <input type="number" id="voters-count" name="voters-count" value="10" min="1" max="1000">
                <Note>Pro každého hlasujícího bude vygenerován unikátní odkaz</Note>
            </div>

            <div class="form-group" id="group-selection">
                <label for="poll-group">Skupina (pouze pro neanonymní hlasování):</label>
                <select id="poll-group" name="poll-group">
                    <option value="null">-- Bez skupiny --</option>
                    {userGroups.map((group: any) => (
                            <option value={group.id}>{group.name}</option>
                    ))}
                    <option id="create-group" value="create">Vytvořit novou skupinu</option>
                </select>
            </div>

            <div class="form-group">
                <label for="poll-max-options">Maximální počet voleb:</label>
                <input type="number" id="poll-max-options" name="poll-max-options" value="1" min="1">
                <span class="hint">Kolik možností může každý hlasující zvolit</span>
            </div>

            <div class="form-group">
                <label>Možnosti hlasování:</label>
                <input type="hidden" name="options-count" id="options-count" value="2">
                <div id="options-container">
                    <div class="option-row">
                        <input type="text" name="option-1" placeholder="Možnost 1" required>
                    </div>
                    <div class="option-row">
                        <input type="text" name="option-2" placeholder="Možnost 2" required>
                    </div>
                </div>
                <button type="button" id="add-option" class="btn btn-small">+ Přidat možnost</button>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Vytvořit anketu</button>
                <a href="/admin" class="btn btn-secondary">Zrušit</a>
            </div>
        </form>
        </FloatingContainer>
    </div>
</Layout>

<style>
    .poll-link {
        display: flex;
        gap: 10px;
        margin: 15px 0;
    }

    .poll-link input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #f8f8f8;
    }

    .voter-links-list {
        max-height: 300px;
        overflow-y: auto;
        margin-top: 15px;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 4px;
    }

    .voter-link {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        gap: 10px;
    }

    .voter-number {
        min-width: 80px;
        font-weight: bold;
    }

    .voter-link input {
        flex-grow: 1;
    }

    .voter-links-actions {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }
</style>

<script>
    // Dynamic option adding
    let optionCounter = 2;

    document.getElementById('add-option')?.addEventListener('click', () => {
        optionCounter++;
        const optionsContainer = document.getElementById('options-container');
        const newOption = document.createElement('div');
        newOption.className = 'option-row';
        newOption.innerHTML = `<input type="text" name="option-${optionCounter}" placeholder="Možnost ${optionCounter}" required>`;
        optionsContainer?.appendChild(newOption);
        const optionCount = document.getElementById('options-count') as HTMLInputElement;
        optionCount.value = `${optionCounter}`;
    });

    // Anonymous checkbox and group selection
    const anonymousCheckbox = document.getElementById('poll-anonymous') as HTMLInputElement;
    const groupSelection = document.getElementById('group-selection') as HTMLDivElement;
    const votersCountGroup = document.getElementById('voters-count-group') as HTMLDivElement;

    if (anonymousCheckbox) {
        anonymousCheckbox.addEventListener('change', () => {
            if (anonymousCheckbox.checked) {
                groupSelection.style.display = 'none';
                votersCountGroup.style.display = 'block';
                const pollGroup = document.getElementById('poll-group') as HTMLInputElement;
                pollGroup.value = 'null';
            } else {
                groupSelection.style.display = 'block';
                votersCountGroup.style.display = 'none';
            }
        });
    }

    // Message closing
    document.querySelectorAll('.close-message').forEach(btn => {
        btn.addEventListener('click', () => {
            const message = btn.closest('.message');
            if (message) {
                message.remove();
            }
        });
    });

    function confirmCopyOnButton(button: HTMLButtonElement) {
        const originalText = button.textContent;
        button.textContent = 'Zkopírováno!';
        setTimeout(() => {
            button.textContent = originalText;
        }, 2000);
    }

    // Link copying
    document.getElementById('copy-link')?.addEventListener('click', () => {
        const linkInput = document.getElementById('poll-link') as HTMLInputElement;
        linkInput.select();
        navigator.clipboard.writeText(linkInput.value);

        const copyBtn = document.getElementById('copy-link') as HTMLButtonElement;
        confirmCopyOnButton(copyBtn);
    });

    // Copying individual voter links
    document.querySelectorAll('.copy-voter-link')?.forEach(btn => {
        btn.addEventListener('click', () => {
            const link = btn.getAttribute('data-link') as string;
            navigator.clipboard.writeText(link);

            confirmCopyOnButton(btn as HTMLButtonElement);
        });
    });

    // Copy all links
    document.getElementById('copy-all-links')?.addEventListener('click', () => {
        const links = Array.from(document.querySelectorAll('.voter-link input')).map(input => (input as HTMLInputElement).value);
        const text = links.join('\n');

        navigator.clipboard.writeText(text);

        const btn = document.getElementById('copy-all-links') as HTMLButtonElement;
        confirmCopyOnButton(btn);
    });

    // CSV download
    document.getElementById('download-csv')?.addEventListener('click', () => {
        const links = Array.from(document.querySelectorAll('.voter-link input')).map(input => (input as HTMLInputElement).value);
        let csvContent = "data:text/csv;charset=utf-8,";

        csvContent += "Odkaz pro hlasování\n";

        links.forEach(link => {
            csvContent += link + "\n";
        });

        // CSV download
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "odkazy_pro_hlasovani.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    });

    const createGroup = document.querySelector("#create-group");
    createGroup?.addEventListener("click", () => {
        window.open("/poll/group?popup", "Vytvořit skupinu", "width=800,height=600");
        window.addEventListener("message", (event) => {
            if (event.data.type === "group-created") {
                // get the group data and append prepend before #create-group
                const groupId = event.data.groupId;
                const groupName = event.data.groupName;

                const newOption:HTMLOptionElement = document.createElement("option");
                newOption.value = groupId;
                newOption.textContent = groupName;
                newOption.selected = true;
                (createGroup as HTMLOptionElement).selected = false;
                createGroup.parentElement?.insertBefore(newOption, createGroup);
            }
        });
    });
</script>